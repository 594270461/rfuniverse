#pragma kernel SetKernel
#pragma kernel CalculateKernel
#pragma kernel NormalizedKernel
#pragma kernel Blur
#define MaxKernel 255
#define Center MaxKernel/2

shared RWTexture2D<float4> Result;
Texture2D<float4> Source;
uint Radius;
float Sigma;

shared float Kernel[MaxKernel * MaxKernel];
uint center = MaxKernel / 2;

float constant;
float power;
shared float sum = 0;

[numthreads(1, 1, 1)]
void SetKernel()
{
    constant = 1 / (2 * 3.1416 * Sigma * Sigma);
    power = 2 * Sigma * Sigma;
}

[numthreads(MaxKernel, 1, 1)]
void CalculateKernel(uint3 dispatchThreadId : SV_GroupThreadID, uint3 groupThreadID : SV_GroupThreadID)
{
    int disX = dispatchThreadId.z - center;
    int disY = groupThreadID.x - center;
    if (abs(disX) <= Radius && abs(disY) <= Radius)
    {
        float rr = disX * disX + disY * disY;
        Kernel[MaxKernel * dispatchThreadId.z + groupThreadID.x] = constant * exp(-rr / power);
        //sum += Kernel[dispatchThreadId.z][groupThreadID.x];
        //locked(sum, Kernel[dispatchThreadId.z][groupThreadID.x]);

    }
}
[numthreads(MaxKernel, 1, 1)]
void NormalizedKernel(uint3 dispatchThreadId : SV_GroupThreadID, uint3 groupThreadID : SV_GroupThreadID)
{
    int disX = dispatchThreadId.z - center;
    int disY = groupThreadID.x - center;
    if (abs(disX) <= Radius && abs(disY) <= Radius)
    {
        for (int i = 0; i < MaxKernel * MaxKernel; i++)
            sum += Kernel[MaxKernel * dispatchThreadId.z + groupThreadID.x];
            
        Kernel[MaxKernel * dispatchThreadId.z + groupThreadID.x] = Kernel[MaxKernel * dispatchThreadId.z + groupThreadID.x] / sum;
    }
}

[numthreads(MaxKernel, 1, 1)]
void Blur(uint3 dispatchThreadId : SV_DispatchThreadID, uint3 groupThreadID : SV_GroupThreadID)
{
    int disX = dispatchThreadId.z - center;
    int disY = groupThreadID.x - center;
    if (abs(disX) <= Radius && abs(disY) <= Radius)
    {
        float4 color = 0;
        for (int x = -Radius; x <= Radius; x++)
        {
            for (int y = -Radius; y <= Radius; y++)
            {
                uint2 offset = dispatchThreadId.xy + int2(x, y);
                color += Source[offset] * Kernel[MaxKernel * (MaxKernel / 2 + x) + MaxKernel / 2 + y];
            }
        }
        Result[dispatchThreadId.xy] = color;
    }
}